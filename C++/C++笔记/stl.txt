const默认作用于其左边的东西，否则作用于其右边的东西：
例如，const int* const只有右边有东西，所以const修饰int成为常量整型，然后*再作用于常量整型。所以这是a pointer to a constant integer（指向一个整型，不可通过该指针改变其指向的内容，但可改变指针本身所指向的地址）int const *再看这个，const左边有东西，所以const作用于int，*再作用于int const所以这还是 a pointer to a constant integer（同上）int* const 这个const的左边是*，所以const作用于指针（不可改变指向的地址），所以这是a constant pointer to an integer，可以通过指针改变其所指向的内容但只能指向该地址，不可指向别的地址。
int const * const
这里也出现了两个const，左边都有东西，那么左边的const作用于int，右边的const作用于*，于是这个还是是a constant pointer to a constant integer
唯一区别是后者无脑从右往左读就行。


迭代器：（可以++，就可以--；可以+n，就可以-n）
种类：		功能：								支持运算：
输入迭代器	对数据的只读访问						只读，支持++、==、！=
输出迭代器	对数据的只写访问						只写，支持++
前向迭代器	读写操作，并能向前推进迭代器					读写，支持++、==、！=
双向迭代器	读写操作，并能向前和向后操作					读写，支持++、–，
随机访问迭代器	读写操作，可以以跳跃的方式访问任意数据，功能最强的迭代器	读写，支持++、–、[n]、-n、<、<=、>、>=

迭代器使用非常类似于指针，初学阶段我们可以先理解迭代器为指针。
begin（）指向第一个元素，而end（）指向最后一个元素的下一个元素（也就是空），end（）-1才是指向最后一个元素！！！！！！！！

vector容器的迭代器是支持随机访问的迭代器

deque双端数组，可以对头端进行插入删除操作，对头部的插入删除速度回比vector快
deque容器的迭代器也是支持随机访问的

stack是一种先进后出(First In Last Out,FILO)的数据结构，它只有一个出口栈中只有顶端的元素才可以被外界使用，因此栈不允许有遍历行为

Queue是一种先进先出(First In First Out,FIFO)的数据结构，它有两个出口队列容器允许从一端新增元素，从另一端移除元素队列中只有队头和队尾才可以被外界使用，因此队列不允许有遍历行为


STL中的链表是一个双向循环链表：
由于链表的存储方式并不是连续的内存空间，因此链表list中的迭代器只支持前移和后移，属于双向迭代器
不支持at访问数据，不支持[]方式访问数据

set和multiset区别：
set不允许容器中有重复的元素，所有元素都会在插入时自动被排序
multiset允许容器中有重复的元素
set/multiset属于关联式容器，底层结构是用二叉树实现

map中所有元素都是pair
pair中第一个元素为key（键值），起到索引作用，第二个元素为value（实值）
map/multimap属于关联式容器，底层结构是用二叉树实现
根据key值快速找到value值
map和multimap区别：
map不允许容器中有重复key值元素
multimap允许容器中有重复key值元素
map容器默认排序规则为 按照key值进行 从小到大排序，掌握如何改变排序规则


























